<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Real-time Production Plan Monitoring') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-full mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 bg-white border-b border-gray-200">
                    <div class="flex justify-between items-center mb-4">
                        <h3 class="text-lg font-medium text-gray-900">Current Production Plans</h3>
                        <div class="flex items-center">
                            <span class="mr-2 text-sm text-gray-500">Last updated: <span id="last-updated"></span></span>
                            <div id="loading-spinner" style="display: none;"
                                class="animate-spin rounded-full h-5 w-5 border-b-2 border-gray-900"></div>
                        </div>
                    </div>
                    <div class="overflow-x-auto" id="monitor-table-container">
                        {{-- Table will be dynamically generated by JavaScript --}}
                    </div>
                </div>
            </div>
        </div>
    </div>

    @push('scripts')
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                const tableContainer = document.getElementById('monitor-table-container');
                const loadingSpinner = document.getElementById('loading-spinner');
                const lastUpdatedSpan = document.getElementById('last-updated');
                const REFRESH_INTERVAL = 30000; // 30 seconds

                const fetchData = () => {
                    loadingSpinner.style.display = 'block';
                    fetch("{{ route('production-plans.monitor.data') }}")
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Network response was not ok');
                            }
                            return response.json();
                        })
                        .then(data => {
                            renderTable(data);
                            lastUpdatedSpan.textContent = new Date().toLocaleTimeString();
                        })
                        .catch(error => {
                            console.error('Error fetching monitoring data:', error);
                            tableContainer.innerHTML =
                                `<p class="text-center text-red-500">Failed to load data. Please try again later.</p>`;
                        })
                        .finally(() => {
                            loadingSpinner.style.display = 'none';
                        });
                };

                const renderTable = (plans) => {
                    if (plans.length === 0) {
                        tableContainer.innerHTML = `<p class="text-center text-gray-500">No active production plans found.</p>`;
                        return;
                    }

                    let tableHtml = `
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-100">
                        <tr>
                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Plan No</th>
                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">VC Code</th>
                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Model</th>
                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Order Qty</th>
                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Material Status</th>
                            <th class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Shortage Details</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
            `;

                    plans.forEach(plan => {
                        const statusClass = plan.is_shortage ? 'bg-red-100' : 'bg-green-100';
                        const statusText = plan.is_shortage ? 'Shortage' : 'OK';
                        
                        let shortageDetails = 'N/A';
                        if (plan.is_shortage) {
                            shortageDetails = '<ul class="space-y-1">';
                            plan.shortages.forEach(shortage => {
                                shortageDetails += `<li class="text-xs">
                                    ${shortage.material_number}: 
                                    <strong class="text-red-600">Bal: ${shortage.balance}</strong>
                                    <span class="text-gray-500">(WH: ${shortage.wh_qty}, CY: ${shortage.cy_qty}, LS: ${shortage.line_side_qty})</span>
                                </li>`;
                            });
                            shortageDetails += '</ul>';
                        }

                        tableHtml += `
                        <tr class="${plan.is_shortage ? 'bg-red-50' : ''}">
                            <td class="px-4 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${plan.plan_no}</td>
                            <td class="px-4 py-4 whitespace-nowrap text-sm text-gray-500">${plan.vc_code}</td>
                            <td class="px-4 py-4 whitespace-nowrap text-sm text-gray-500">${plan.model}</td>
                            <td class="px-4 py-4 whitespace-nowrap text-sm text-gray-500">${plan.production_order}</td>
                            <td class="px-4 py-4 whitespace-nowrap text-sm text-gray-500">${plan.production_date}</td>
                            <td class="px-4 py-4 whitespace-nowrap text-sm text-gray-500 capitalize">${plan.status}</td>
                            <td class="px-4 py-4 whitespace-nowrap text-sm">
                                <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${statusClass} text-gray-800">
                                    ${statusText}
                                </span>
                            </td>
                            <td class="px-4 py-4 whitespace-nowrap text-sm text-gray-500">${shortageDetails}</td>
                        </tr>
                    `;
                    });

                    tableHtml += `
                    </tbody>
                </table>
            `;

                    tableContainer.innerHTML = tableHtml;
                };

                // Initial fetch
                fetchData();

                // Set interval to fetch data periodically
                setInterval(fetchData, REFRESH_INTERVAL);
            });
        </script>
    @endpush
</x-app-layout>

